{"ast":null,"code":"let initialState = {\n  item: []\n};\n\nconst laterSeen = (state = initialState, action) => {\n  if (action.type === \"NEWITEMS\") {\n    {\n      let n = state.item.length - 1 + 1;\n      let neweat = {\n        _id: n,\n        eat: action.info,\n        ves: action.ves,\n        size: action.size\n      };\n\n      if (!state.item.some(buy => buy.eat === action.info)) {\n        if (state.item.length >= 6) {\n          state.item.splice(0, 0);\n          return { ...state,\n            item: [...state.item, neweat]\n          };\n        } else {\n          return { ...state,\n            item: [...state.item, neweat]\n          };\n        }\n      }\n    }\n    return state;\n  } else {\n    return state;\n  }\n};\n\nexport const actionsn = {\n  newItem: (info, ves, size) => {\n    return {\n      type: \"NEWITEMS\",\n      info,\n      ves,\n      size\n    };\n  }\n};\nexport default laterSeen;","map":{"version":3,"sources":["/Users/daloniil/Desktop/Programer/Pizza/src/Redux/later-seen-reducer.ts"],"names":["initialState","item","laterSeen","state","action","type","n","length","neweat","_id","eat","info","ves","size","some","buy","splice","actionsn","newItem"],"mappings":"AAGA,IAAIA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAAnB;;AAMA,MAAMC,SAAS,GAAG,CAChBC,KAAK,GAAGH,YADQ,EAEhBI,MAFgB,KAGK;AACrB,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B;AACE,UAAIC,CAAC,GAAGH,KAAK,CAACF,IAAN,CAAWM,MAAX,GAAoB,CAApB,GAAwB,CAAhC;AACA,UAAIC,MAAM,GAAG;AACXC,QAAAA,GAAG,EAAEH,CADM;AAEXI,QAAAA,GAAG,EAAEN,MAAM,CAACO,IAFD;AAGXC,QAAAA,GAAG,EAAER,MAAM,CAACQ,GAHD;AAIXC,QAAAA,IAAI,EAAET,MAAM,CAACS;AAJF,OAAb;;AAOA,UAAI,CAACV,KAAK,CAACF,IAAN,CAAWa,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACL,GAAJ,KAAYN,MAAM,CAACO,IAA5C,CAAL,EAAwD;AACtD,YAAIR,KAAK,CAACF,IAAN,CAAWM,MAAX,IAAqB,CAAzB,EAA4B;AAC1BJ,UAAAA,KAAK,CAACF,IAAN,CAAWe,MAAX,CAAkB,CAAlB,EAAqB,CAArB;AACA,iBAAyB,EACvB,GAAGb,KADoB;AAEvBF,YAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBO,MAAhB;AAFiB,WAAzB;AAID,SAND,MAMO;AACL,iBAAyB,EACvB,GAAGL,KADoB;AAEvBF,YAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBO,MAAhB;AAFiB,WAAzB;AAID;AACF;AACF;AACD,WAAOL,KAAP;AACD,GA1BD,MA0BO;AACL,WAAOA,KAAP;AACD;AACF,CAjCD;;AAqCA,OAAO,MAAMc,QAAQ,GAAG;AACtBC,EAAAA,OAAO,EAAE,CACPP,IADO,EAEPC,GAFO,EAGPC,IAHO,KAIJ;AACH,WAAO;AACLR,MAAAA,IAAI,EAAE,UADD;AAELM,MAAAA,IAFK;AAGLC,MAAAA,GAHK;AAILC,MAAAA;AAJK,KAAP;AAMD;AAZqB,CAAjB;AAeP,eAAeX,SAAf","sourcesContent":["import { actionsType } from \"./redux-store\";\nimport { ItemType, ReducerType } from \"../Types/Type\";\n\nlet initialState = {\n  item: [] as Array<ItemType>,\n};\n\nexport type initialStateType = typeof initialState;\n\nconst laterSeen = (\n  state = initialState,\n  action: ActionsTypes\n): initialStateType => {\n  if (action.type === \"NEWITEMS\") {\n    {\n      let n = state.item.length - 1 + 1;\n      let neweat = {\n        _id: n,\n        eat: action.info,\n        ves: action.ves,\n        size: action.size,\n      };\n\n      if (!state.item.some((buy) => buy.eat === action.info)) {\n        if (state.item.length >= 6) {\n          state.item.splice(0, 0);\n          return <initialStateType>{\n            ...state,\n            item: [...state.item, neweat],\n          };\n        } else {\n          return <initialStateType>{\n            ...state,\n            item: [...state.item, neweat],\n          };\n        }\n      }\n    }\n    return state;\n  } else {\n    return state;\n  }\n};\n\ntype ActionsTypes = actionsType<typeof actionsn>;\n\nexport const actionsn = {\n  newItem: (\n    info: ReducerType,\n    ves: number | undefined,\n    size: number | undefined\n  ) => {\n    return {\n      type: \"NEWITEMS\",\n      info,\n      ves,\n      size,\n    } as const;\n  },\n};\n\nexport default laterSeen;\n"]},"metadata":{},"sourceType":"module"}