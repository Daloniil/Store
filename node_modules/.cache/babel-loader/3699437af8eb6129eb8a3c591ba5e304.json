{"ast":null,"code":"let initialState = {\n  item: []\n};\n\nconst laterSeen = (state = initialState, action) => {\n  if (action.type === \"NEWITEMS\") {\n    {\n      let n = state.item.length - 1 + 1;\n      let neweat = {\n        _id: n,\n        eat: action.info,\n        ves: action.ves,\n        size: action.size\n      };\n\n      if (!state.item.some(buy => buy.eat === action.info)) {\n        if (state.item.length >= 6) {\n          state.item.splice(0, 0);\n          return { ...state,\n            item: [...state.item, neweat]\n          };\n        } else {\n          return { ...state,\n            item: [...state.item, neweat]\n          };\n        }\n      }\n    }\n    return state;\n  } else {\n    return state;\n  }\n};\n\nexport const actionsn = {\n  newItem: (info, ves, size) => {\n    return {\n      type: \"NEWITEMS\",\n      info,\n      ves,\n      size\n    };\n  }\n};\nexport default laterSeen;","map":{"version":3,"sources":["/Users/daloniil/Desktop/Programer/Pizza/src/Redux/later-seen-reducer.ts"],"names":["initialState","item","laterSeen","state","action","type","n","length","neweat","_id","eat","info","ves","size","some","buy","splice","actionsn","newItem"],"mappings":"AAIA,IAAIA,YAAY,GAAG;AACfC,EAAAA,IAAI,EAAE;AADS,CAAnB;;AASA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkE;AAChF,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B;AACI,UAAIC,CAAC,GAAGH,KAAK,CAACF,IAAN,CAAWM,MAAX,GAAoB,CAApB,GAAwB,CAAhC;AACA,UAAIC,MAAM,GAAG;AACTC,QAAAA,GAAG,EAAEH,CADI;AAETI,QAAAA,GAAG,EAAEN,MAAM,CAACO,IAFH;AAGTC,QAAAA,GAAG,EAAER,MAAM,CAACQ,GAHH;AAITC,QAAAA,IAAI,EAAET,MAAM,CAACS;AAJJ,OAAb;;AAOA,UAAI,CAACV,KAAK,CAACF,IAAN,CAAWa,IAAX,CAAiBC,GAAD,IAASA,GAAG,CAACL,GAAJ,KAAYN,MAAM,CAACO,IAA5C,CAAL,EAAwD;AACpD,YAAIR,KAAK,CAACF,IAAN,CAAWM,MAAX,IAAqB,CAAzB,EAA4B;AACxBJ,UAAAA,KAAK,CAACF,IAAN,CAAWe,MAAX,CAAkB,CAAlB,EAAqB,CAArB;AACA,iBAAyB,EACrB,GAAGb,KADkB;AAErBF,YAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBO,MAAhB;AAFe,WAAzB;AAIH,SAND,MAMO;AACH,iBAAyB,EACrB,GAAGL,KADkB;AAErBF,YAAAA,IAAI,EAAE,CAAC,GAAGE,KAAK,CAACF,IAAV,EAAgBO,MAAhB;AAFe,WAAzB;AAIH;AACJ;AACJ;AACD,WAAOL,KAAP;AACH,GA1BD,MA0BO;AACH,WAAOA,KAAP;AACH;AAEJ,CA/BD;;AAmCA,OAAO,MAAMc,QAAQ,GAAG;AACpBC,EAAAA,OAAO,EAAE,CAACP,IAAD,EAAoBC,GAApB,EAA6CC,IAA7C,KAA0E;AAC/E,WAAO;AACHR,MAAAA,IAAI,EAAE,UADH;AAEHM,MAAAA,IAFG;AAEGC,MAAAA,GAFH;AAEQC,MAAAA;AAFR,KAAP;AAIH;AANmB,CAAjB;AAUP,eAAeX,SAAf","sourcesContent":["import {actionsType} from \"./redux-store\";\nimport {ItemType, ReducerType} from \"../Types/Type\";\n\n\nlet initialState = {\n    item: [] as Array<ItemType>,\n\n};\n\n\nexport type initialStateType = typeof initialState\n\n\nconst laterSeen = (state = initialState, action: ActionsTypes): initialStateType => {\n    if (action.type === \"NEWITEMS\") {\n        {\n            let n = state.item.length - 1 + 1;\n            let neweat = {\n                _id: n,\n                eat: action.info,\n                ves: action.ves,\n                size: action.size\n            }\n\n            if (!state.item.some((buy) => buy.eat === action.info)) {\n                if (state.item.length >= 6) {\n                    state.item.splice(0, 0)\n                    return <initialStateType>{\n                        ...state,\n                        item: [...state.item, neweat]\n                    }\n                } else {\n                    return <initialStateType>{\n                        ...state,\n                        item: [...state.item, neweat]\n                    }\n                }\n            }\n        }\n        return state;\n    } else {\n        return state;\n    }\n\n}\n\ntype ActionsTypes = actionsType<typeof actionsn>\n\nexport const actionsn = {\n    newItem: (info: ReducerType, ves: number | undefined, size: number | undefined) => {\n        return {\n            type: \"NEWITEMS\",\n            info, ves, size\n        } as const\n    }\n\n}\n\nexport default laterSeen;"]},"metadata":{},"sourceType":"module"}