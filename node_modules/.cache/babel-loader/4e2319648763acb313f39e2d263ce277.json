{"ast":null,"code":"let initialState = {\n  item: [],\n  lenght: null,\n  amoun: 0\n};\n\nconst buyItem = (state = initialState, action) => {\n  switch (action.type) {\n    case \"BUYITEM\":\n      {\n        let n = state.item.length;\n        let buyeat = {\n          _id: n,\n          id: action.info.id,\n          name: action.info.name,\n          eat: action.info,\n          cost: action.cost,\n          size: action.size,\n          finalcost: action.cost,\n          amount: action.info.amount,\n          photoURL: action.info.photoURL\n        };\n\n        if (action.size > 0) {\n          if (!state.item.some(buy => buy.id === action.info.id)) {\n            debugger;\n            return { ...state,\n              item: [...state.item, buyeat],\n              lenght: state.item.length,\n              amoun: state.amoun + action.info.amount\n            };\n          } else {\n            debugger;\n\n            if (!state.item.some(buy => buy.size === action.size)) {\n              return { ...state,\n                item: [...state.item, buyeat],\n                lenght: state.item.length,\n                amoun: state.amoun + action.info.amount\n              };\n            } else {\n              let searchId = action.info.id;\n              let indexId = state.item.findIndex(el => el.id === searchId);\n              return { ...state,\n                // @ts-ignore\n                ...(state.item[indexId].eat.amount += 1),\n                amoun: state.amoun + 1,\n                ...(state.item[indexId].cost = Object(state.item[indexId].finalcost * state.item[indexId].eat.amount))\n              };\n            }\n          }\n        } else if (!state.item.some(buy => buy.id === action.info.id)) {\n          return { ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length,\n            amoun: state.amoun\n          };\n        } else {\n          let Id = action.info.id;\n          let index = state.item.findIndex(el => el.id === Id);\n          return { ...state,\n            ...(state.item[index].eat.amount += Object(1)),\n            amoun: state.amoun + 1,\n            ...(state.item[index].cost = Object(state.item[index].finalcost * state.item[index].eat.amount))\n          };\n        }\n      }\n\n    case \"LENGHT\":\n      {\n        return { ...state,\n          lenght: action.lenght\n        };\n      }\n\n    case \"AMOUNTSMINUS\":\n      {\n        return { ...state,\n          amoun: state.amoun - action.newam\n        };\n      }\n\n    case \"AMOUNTSPLUS\":\n      {\n        return { ...state,\n          amoun: state.amoun + 1\n        };\n      }\n\n    case \"DELETEARRAY\":\n      {\n        return { ...state,\n          item: [],\n          lenght: null,\n          amoun: 0\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  buy: (info, cost, size) => {\n    debugger;\n    return {\n      type: \"BUYITEM\",\n      info,\n      cost,\n      size\n    };\n  },\n  deleteLenght: lenght => {\n    return {\n      type: \"LENGHT\",\n      lenght\n    };\n  },\n  amountLeghtminus: newam => {\n    return {\n      type: \"AMOUNTSMINUS\",\n      newam\n    };\n  },\n  amountLeghtplus: () => {\n    return {\n      type: \"AMOUNTSPLUS\"\n    };\n  },\n  daletArray: () => {\n    return {\n      type: \"DELETEARRAY\"\n    };\n  }\n};\nexport default buyItem;","map":{"version":3,"sources":["/Users/daloniil/Desktop/Programer/Store/src/Redux/buy-item-reducer.ts"],"names":["initialState","item","lenght","amoun","buyItem","state","action","type","n","length","buyeat","_id","id","info","name","eat","cost","size","finalcost","amount","photoURL","some","buy","searchId","indexId","findIndex","el","Object","Id","index","newam","actions","deleteLenght","amountLeghtminus","amountLeghtplus","daletArray"],"mappings":"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","sourcesContent":["import { actionsType } from \"./redux-store\";\nimport { ReducerType } from \"../Types/Type\";\n\nlet initialState = {\n  item: [] as Array<BuyItemType>,\n  lenght: null as number | null,\n  amoun: 0 as number,\n};\n\nexport type BuyItemType = {\n  _id: number;\n  id: number;\n  name: string;\n  eat: ReducerType;\n  photoURL: string;\n  cost: number;\n  size: number;\n  finalcost: number;\n  amount: number;\n};\n\nexport type initialStateType = typeof initialState;\n\nconst buyItem = (\n  state = initialState,\n  action: ActionsTypes\n): initialStateType => {\n  switch (action.type) {\n    case \"BUYITEM\": {\n      let n = state.item.length;\n      let buyeat = {\n        _id: n,\n        id: action.info.id,\n        name: action.info.name,\n        eat: action.info,\n        cost: action.cost,\n        size: action.size,\n        finalcost: action.cost,\n        amount: action.info.amount,\n        photoURL: action.info.photoURL,\n      };\n\n      if (action.size > 0) {\n        if (!state.item.some((buy) => buy.id === action.info.id)) {\n          debugger;\n          return {\n            ...state,\n            item: [...state.item, buyeat],\n            lenght: state.item.length,\n            amoun: state.amoun + action.info.amount,\n          };\n        } else {\n          debugger;\n\n          if (!state.item.some((buy) => buy.size === action.size)) {\n            return {\n              ...state,\n              item: [...state.item, buyeat],\n              lenght: state.item.length,\n              amoun: state.amoun + action.info.amount,\n            };\n          } else {\n            let searchId = action.info.id;\n            let indexId = state.item.findIndex((el) => el.id === searchId);\n            return {\n              ...state,\n              // @ts-ignore\n              ...(state.item[indexId].eat.amount += 1),\n              amoun: state.amoun + 1,\n              ...(state.item[indexId].cost = Object(\n                (state.item[indexId].finalcost *\n                  state.item[indexId].eat.amount) as {}\n              )),\n            };\n          }\n        }\n      } else if (!state.item.some((buy) => buy.id === action.info.id)) {\n        return {\n          ...state,\n          item: [...state.item, buyeat],\n          lenght: state.item.length,\n          amoun: state.amoun,\n        };\n      } else {\n        let Id = action.info.id;\n        let index = state.item.findIndex((el) => el.id === Id);\n\n        return {\n          ...state,\n          ...(state.item[index].eat.amount += Object(1 as {})),\n          amoun: state.amoun + 1,\n          ...(state.item[index].cost = Object(\n            (state.item[index].finalcost * state.item[index].eat.amount) as {}\n          )),\n        };\n      }\n    }\n\n    case \"LENGHT\": {\n      return {\n        ...state,\n        lenght: action.lenght,\n      };\n    }\n\n    case \"AMOUNTSMINUS\": {\n      return {\n        ...state,\n        amoun: state.amoun - action.newam,\n      };\n    }\n\n    case \"AMOUNTSPLUS\": {\n      return {\n        ...state,\n        amoun: state.amoun + 1,\n      };\n    }\n\n    case \"DELETEARRAY\": {\n      return {\n        ...state,\n        item: [],\n        lenght: null,\n        amoun: 0,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\ntype ActionsTypes = actionsType<typeof actions>;\n\nexport const actions = {\n  buy: (info: ReducerType, cost: number, size: number) => {\n    debugger;\n\n    return {\n      type: \"BUYITEM\",\n      info,\n      cost,\n      size,\n    } as const;\n  },\n\n  deleteLenght: (lenght: number) => {\n    return {\n      type: \"LENGHT\",\n      lenght,\n    } as const;\n  },\n\n  amountLeghtminus: (newam: number) => {\n    return {\n      type: \"AMOUNTSMINUS\",\n      newam,\n    } as const;\n  },\n\n  amountLeghtplus: () => {\n    return {\n      type: \"AMOUNTSPLUS\",\n    } as const;\n  },\n  daletArray: () => {\n    return {\n      type: \"DELETEARRAY\",\n    } as const;\n  },\n};\n\nexport default buyItem;\n"]},"metadata":{},"sourceType":"module"}