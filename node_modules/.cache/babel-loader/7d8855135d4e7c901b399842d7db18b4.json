{"ast":null,"code":"var _jsxFileName = \"/Users/daloniil/Desktop/Programer/Pizza/src/Components/FormsControl/FormContorl.tsx\";\nimport s from './StyleFormsControl/FormControl.module.css';\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FromControl = ({\n  meta: {\n    touched,\n    error\n  },\n  children\n}) => {\n  let showing;\n\n  if (touched && error) {\n    showing = s.error;\n  } else if (touched) {\n    showing = s.touch;\n  } else if (error) {\n    showing = s.error;\n  } else {\n    showing = s.standart;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.formControl + \" \" + showing,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FromControl;\nexport const Input = props => {\n  const {\n    input,\n    meta,\n    ...restProps\n  } = props;\n  const showError = props.meta.touched && props.meta.error;\n  return /*#__PURE__*/_jsxDEV(FromControl, { ...props,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", { ...props.input,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 37\n    }, this), showError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.errormessageinput,\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n};\n_c2 = Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FromControl\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/daloniil/Desktop/Programer/Pizza/src/Components/FormsControl/FormContorl.tsx"],"names":["s","React","FromControl","meta","touched","error","children","showing","touch","standart","formControl","Input","props","input","restProps","showError","errormessageinput"],"mappings":";AAAA,OAAOA,CAAP,MAAc,4CAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAQA,MAAMC,WAAsC,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAE;AAACC,IAAAA,OAAD;AAAUC,IAAAA;AAAV,GAAP;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AAGnF,MAAIC,OAAJ;;AACA,MAAIH,OAAO,IAAIC,KAAf,EAAsB;AAClBE,IAAAA,OAAO,GAAGP,CAAC,CAACK,KAAZ;AACH,GAFD,MAEO,IAAID,OAAJ,EAAa;AAChBG,IAAAA,OAAO,GAAGP,CAAC,CAACQ,KAAZ;AACH,GAFM,MAEA,IAAIH,KAAJ,EAAW;AACdE,IAAAA,OAAO,GAAGP,CAAC,CAACK,KAAZ;AAEH,GAHM,MAGA;AACHE,IAAAA,OAAO,GAAGP,CAAC,CAACS,QAAZ;AACH;;AAED,sBAEI;AAAK,IAAA,SAAS,EAAET,CAAC,CAACU,WAAF,GAAgB,GAAhB,GAAsBH,OAAtC;AAAA,2BACI;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH,CAzBD;;KAAMJ,W;AA2BN,OAAO,MAAMS,KAAkC,GAAIC,KAAD,IAAW;AACzD,QAAM;AAACC,IAAAA,KAAD;AAAQV,IAAAA,IAAR;AAAc,OAAGW;AAAjB,MAA8BF,KAApC;AAEA,QAAMG,SAAS,GAAGH,KAAK,CAACT,IAAN,CAAWC,OAAX,IAAsBQ,KAAK,CAACT,IAAN,CAAWE,KAAnD;AAEA,sBAAO,QAAC,WAAD,OAAiBO,KAAjB;AAAA,iCAAyB,sBAAWA,KAAK,CAACC,KAAjB;AAAA,SAA4BC;AAA5B;AAAA;AAAA;AAAA;AAAA,YAAzB,EACFC,SAAS,iBAAI;AAAK,MAAA,SAAS,EAAEf,CAAC,CAACgB,iBAAlB;AAAA,gBAAsCb,IAAI,CAACE;AAA3C;AAAA;AAAA;AAAA;AAAA,YADX;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,CATM;MAAMM,K","sourcesContent":["import s from './StyleFormsControl/FormControl.module.css';\nimport React from \"react\";\nimport {WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\n\ntype FromControlType = {\n    meta: WrappedFieldMetaProps,\n    children: React.ReactNode\n}\n\nconst FromControl: React.FC<FromControlType> = ({meta: {touched, error}, children}) => {\n\n\n    let showing\n    if (touched && error) {\n        showing = s.error\n    } else if (touched) {\n        showing = s.touch\n    } else if (error) {\n        showing = s.error\n\n    } else {\n        showing = s.standart\n    }\n\n    return (\n\n        <div className={s.formControl + \" \" + showing}>\n            <div>\n                {children}\n            </div>\n\n        </div>\n    )\n\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n\n    const showError = props.meta.touched && props.meta.error\n\n    return <FromControl {...props}> <input {...props.input} {...restProps}/>\n        {showError && <div className={s.errormessageinput}>{meta.error}</div>}</FromControl>\n\n\n}\n\n"]},"metadata":{},"sourceType":"module"}