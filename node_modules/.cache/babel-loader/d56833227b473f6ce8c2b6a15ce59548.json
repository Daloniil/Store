{"ast":null,"code":"var _jsxFileName = \"/Users/daloniil/Desktop/Programer/Store/src/Components/FormsControl/FormContorl.tsx\";\nimport s from \"./FormControl.module.css\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FromControl = ({\n  meta: {\n    touched,\n    error\n  },\n  children\n}) => {\n  let showing;\n\n  if (touched && error) {\n    showing = s.error;\n  } else if (touched) {\n    showing = s.touch;\n  } else if (error) {\n    showing = s.error;\n  } else {\n    showing = s.standart;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.formControl + \" \" + showing,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FromControl;\nexport const Input = props => {\n  const {\n    input,\n    meta,\n    ...restProps\n  } = props;\n  const showError = props.meta.touched && props.meta.error;\n  return /*#__PURE__*/_jsxDEV(FromControl, { ...props,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...props.input,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), showError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.errormessageinput,\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FromControl\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/daloniil/Desktop/Programer/Store/src/Components/FormsControl/FormContorl.tsx"],"names":["s","React","FromControl","meta","touched","error","children","showing","touch","standart","formControl","Input","props","input","restProps","showError","errormessageinput"],"mappings":";AAAA,OAAOA,CAAP,MAAc,0BAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAQA,MAAMC,WAAsC,GAAG,CAAC;AAC9CC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GADwC;AAE9CC,EAAAA;AAF8C,CAAD,KAGzC;AACJ,MAAIC,OAAJ;;AACA,MAAIH,OAAO,IAAIC,KAAf,EAAsB;AACpBE,IAAAA,OAAO,GAAGP,CAAC,CAACK,KAAZ;AACD,GAFD,MAEO,IAAID,OAAJ,EAAa;AAClBG,IAAAA,OAAO,GAAGP,CAAC,CAACQ,KAAZ;AACD,GAFM,MAEA,IAAIH,KAAJ,EAAW;AAChBE,IAAAA,OAAO,GAAGP,CAAC,CAACK,KAAZ;AACD,GAFM,MAEA;AACLE,IAAAA,OAAO,GAAGP,CAAC,CAACS,QAAZ;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAET,CAAC,CAACU,WAAF,GAAgB,GAAhB,GAAsBH,OAAtC;AAAA,2BACE;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;KAAMJ,W;AAsBN,OAAO,MAAMS,KAAkC,GAAIC,KAAD,IAAW;AAC3D,QAAM;AAAEC,IAAAA,KAAF;AAASV,IAAAA,IAAT;AAAe,OAAGW;AAAlB,MAAgCF,KAAtC;AAEA,QAAMG,SAAS,GAAGH,KAAK,CAACT,IAAN,CAAWC,OAAX,IAAsBQ,KAAK,CAACT,IAAN,CAAWE,KAAnD;AAEA,sBACE,QAAC,WAAD,OAAiBO,KAAjB;AAAA,4BACE,sBAAWA,KAAK,CAACC,KAAjB;AAAA,SAA4BC;AAA5B;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,SAAS,iBAAI;AAAK,MAAA,SAAS,EAAEf,CAAC,CAACgB,iBAAlB;AAAA,gBAAsCb,IAAI,CAACE;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAXM;MAAMM,K","sourcesContent":["import s from \"./FormControl.module.css\";\nimport React from \"react\";\nimport { WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\n\ntype FromControlType = {\n  meta: WrappedFieldMetaProps;\n  children: React.ReactNode;\n};\n\nconst FromControl: React.FC<FromControlType> = ({\n  meta: { touched, error },\n  children,\n}) => {\n  let showing;\n  if (touched && error) {\n    showing = s.error;\n  } else if (touched) {\n    showing = s.touch;\n  } else if (error) {\n    showing = s.error;\n  } else {\n    showing = s.standart;\n  }\n\n  return (\n    <div className={s.formControl + \" \" + showing}>\n      <div>{children}</div>\n    </div>\n  );\n};\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n  const { input, meta, ...restProps } = props;\n\n  const showError = props.meta.touched && props.meta.error;\n\n  return (\n    <FromControl {...props}>\n      <input {...props.input} {...restProps} />\n      {showError && <div className={s.errormessageinput}>{meta.error}</div>}\n    </FromControl>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}